/*
 * Copyright (c) 2022 Siyi Lv
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave.edl - Top EDL file. */

enclave {
    
    //include "user_types.h" /* buffer_t */

    /* Import ECALL/OCALL from sub-directory EDLs.
     *  [from]: specifies the location of EDL file. 
     *  [import]: specifies the functions to import, 
     *  [*]: implies to import all functions.
     */
    trusted{
    
    public uint32_t get_sealed_state_size();
    public uint32_t get_sealed_delset_size();
	public sgx_status_t seal_state([out, size=data_size] uint8_t* sealed_blob, uint32_t data_size);
    public sgx_status_t seal_delset([out, size=data_size] uint8_t* sealed_blob, uint32_t data_size);
    public sgx_status_t unseal_state([in, size=data_size] const uint8_t *sealed_blob, size_t data_size);
    public sgx_status_t unseal_delset([in, size=data_size] const uint8_t *sealed_blob, size_t data_size);
    public sgx_status_t ecall_add_gen_V([in, size = data_size]char *enc_st, int data_size, [out, size = uVlen]char *cuV, int uVlen, [out, size = eVlen]char *ceV, int eVlen);
    public sgx_status_t ecall_del_gen_V([in, size = data_size]char *enc_st, int data_size, [out, size = xVlen]char *xV, int xVlen); 
    public sgx_status_t ecall_update_D([in, size = data_size]char *enc_st, int data_size, [in, size = eVlen]char*eV, int eVlen, [out, size = uTlen]char*uT, int uTlen, [out, size = uVlen]char*uV, int uVlen);   
    public sgx_status_t ecall_search_w([in, size = data_size]char *enc_st, int data_size, [out, size = len]char *xuT, int len, [out, size = numlen]char* xNum, int numlen);
    public sgx_status_t ecall_get_res([in, size = data_size]char *enc_st, int data_size, [in, size = data_size]char*xeT, int xeTsize, [in, size = numlen]char *xNum, int numlen, [out, size = indlen]char* xind, int indlen);
        };

    /* 
     * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    untrusted {
        
    };

};
